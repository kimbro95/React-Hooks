####################################
### 1.0 Introduction to useState ###
####################################
-useState
클래스형 컴포넌트에서 함수형 컴포넌트를 사용하며 useState를 사용하면 코드의 길이를 단축시킬 수 있다.



####################
### 1.1 useInput ###
####################
html 태그 속성에 객체를 unpack 할 수 있다
ex) const name = useInput("KimBro");
    <input
        value={name.value}
        onchange={name.onchange}
    />
    
    ↓↓↓↓↓↓↓↓↓↓↓
    
    <input
        {...name}
    />



#####################################
### 2.0 Introduction to useEffect ###
#####################################
-useEffect
useEffect는 ComponentDidMount(), ComponentWillUnMount(), ComponentDidUpdate()의 역할을 한다.
ex)
const hello = () => console.log("hello !!!");
1. component가 mount되었을 때만 hello 함수를 동작 시키려면 빈 dependency를 전달하면된다.
useEffect(() => {
    hello();
}, []);

2. component가 mount될 때 와 number에 변화가 있을 때 hello 함수를 동작 시킨다.
useEffect(() => {
    hello();
}, [number]);



####################
### 2.2 useClick ###
####################
-useRef
getElementById()를 하는것과 같다.

-useEffect return
useEffect에서 ⭐return⭐은 ComponentWillUnMount시 동작해야할 동작을 전달하면된다.
ex)
const useClick = (onClick) => {
  const element = useRef();
  useEffect(() => {
    // ComponentDidMount시 동작 dependency가 [] 때문에 ComponentDidMount 일 때만 동작.
    if (typeof onClick !== "function") return;
    if (element.current) {
      element.current.addEventListener("click", onClick);
    }
    // return은 ComponentWillUnMount 일 때만 동작.
    ⭐return⭐ () => {  
      if (element.current) {
        element.current.removeEventListener("click", onClick);
      }
    };
  }, []);
  return element;
};